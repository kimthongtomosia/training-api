const express = require("express");
const bcrypt = require("bcryptjs"); // M√£ h√≥a m·∫≠t kh·∫©u
const { check, validationResult } = require("express-validator"); // Middleware ki·ªÉm tra ƒë·∫ßu v√†o
const User = require("../models/User"); // Import model User

const router = express.Router(); // Kh·ªüi t·∫°o router Express

// üìå Route: ƒêƒÉng k√Ω User
router.post(
    "/register",
    [
        check("username").isLength({ min: 3 }).withMessage("Ten nguoi dung phai tren 3 ky tu"),
        check("email").isEmail().withMessage("Can co email hop le"), // Ki·ªÉm tra email h·ª£p l·ªá
        check("password").isLength({ min: 6 }).withMessage("Mat khau phai tren 6 ky tu"),
    ],
    async (req, res) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });

        const { username, password, email } = req.body;

        // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ error: "Email da duoc su dung" });
        }

        // M√£ h√≥a m·∫≠t kh·∫©u
        const hashedPassword = await bcrypt.hash(password, 10);

        // T·∫°o user m·ªõi
        const newUser = new User({ username, email, password: hashedPassword });
        await newUser.save();

        // Tr·∫£ v·ªÅ th√¥ng b√°o th√†nh c√¥ng, kh√¥ng c·∫ßn token
        res.status(201).json({ message: "Nguoi dung tao thanh cong!" });
    }
);

// üìå Route: ƒêƒÉng nh·∫≠p User
router.post("/login", async (req, res) => {
    const { username, password } = req.body;
    const user = await User.findOne({ username });

    if (!user || !(await bcrypt.compare(password, user.password))) {
        return res.status(400).json({ error: "Thong tin xac thuc khong hop le" });
    }

    // Tr·∫£ v·ªÅ user ID l√†m token
    res.json({ token: user._id });
});

module.exports = router;
